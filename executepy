#!/usr/bin/env python3

from argparse import ArgumentParser
import json
import subprocess

print('Start executer-python [version 0.1]')

parser = ArgumentParser()

parser.add_argument('git_authentication_json', help='')
#parser.add_argument('git_own_email', help='')
#parser.add_argument('git_own_username', help='')
#parser.add_argument('git_own_password', help='')
parser.add_argument('git_path_to_working_repository', help='')
parser.add_argument('git_working_repository_owner', help='')
parser.add_argument('git_working_repository_name', help='')
parser.add_argument('git_name_of_branch', help='')

parser.add_argument('dvc_authentication_json', help='')
#parser.add_argument('dvc_own_username', help='')
#parser.add_argument('dvc_own_password', help='')
parser.add_argument('dvc_servername', help='')
parser.add_argument('dvc_path_to_working_repository', help='')


args = parser.parse_args()

with open(args.git_authentication_json) as f:
    git_authentication_json = json.load(f)
with open(args.dvc_authentication_json) as f:
    dvc_authentication_json = json.load(f)


git_own_username = git_authentication_json['username']
git_own_email = git_authentication_json['email']
git_own_password = git_authentication_json['password']
git_path_to_working_repository = args.git_path_to_working_repository
git_working_repository_owner = args.git_working_repository_owner
git_working_repository_name = args.git_working_repository_name
git_name_of_branch = args.git_name_of_branch

dvc_servername = args.dvc_servername
dvc_path_to_working_repository = args.dvc_path_to_working_repository
dvc_own_username = dvc_authentication_json['username']
dvc_own_password = dvc_authentication_json['password']

if __name__ == '__main__':

    command = 'git config --global user.email ' + git_own_email
    subprocess.check_output(command, shell=True)
    command = 'git config --global user.name ' + git_own_username
    subprocess.check_output(command, shell=True)


    # clone repository
    #git clone https://$2:$3@$1/$4/$5/
    git_complete_path_to_repo = 'https://' + git_own_username+":"+git_own_password+"@"+git_path_to_working_repository + '/' + git_working_repository_owner + '/'+ git_working_repository_name
    command = 'git clone ' + git_complete_path_to_repo
    subprocess.check_output(command, shell=True)

    command = 'cd ' + git_working_repository_name
    subprocess.call(command, shell=True)

    filecontent = "\n['remote \"nas\"']\nurl = ssh://"+dvc_own_username+"@"+dvc_servername+dvc_path_to_working_repository+"\npassword = '"+dvc_own_password+"'\n\n[core]\nremote = nas"
    command = "echo " + filecontent + " > .dvc/config.local"
    subprocess.check_output(command, shell=True)

    command = 'git checkout ' + git_name_of_branch
    subprocess.check_output(command, shell=True)

    command = 'dvc pull'
    subprocess.check_output(command, shell=True)

    command = 'dvc repro -P'
    subprocess.check_output(command, shell=True)

    command = "git commit -m 'run all pipelines of the branch "+git_name_of_branch+"'"
    subprocess.check_output(command, shell=True)

    command = "dvc commit"
    subprocess.check_output(command, shell=True)

    command = "dvc push"
    subprocess.check_output(command, shell=True)

    command = "git push "+git_complete_path_to_repo+" --all"
    subprocess.check_output(command, shell=True)


